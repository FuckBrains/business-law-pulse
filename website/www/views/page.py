# -*- coding: utf-8 -*-

from core.conf import CONST
from core.utils.http import Response

from aiohttp_jinja2 import render_template

import datetime,json
import uuid,base64
import weasyprint

import logging
logger = logging.getLogger('aiohttp.server')


MAIN = CONST['static']['url'] + 'pages/www/%s?_v=' + CONST['static']['cache']



async def index(request):
    if request.device.is_mobile:
        context = { 'main': MAIN % 'm/index/main.js' }
        return render_template('m/index.html', request, context)

    context = { 'main': MAIN % 'pc/index/main.js' }
    return render_template('pc/index.html', request, context)


async def debug(request):
    if request.device.is_mobile:
        context = { 'main': MAIN % 'm/debug/main.js' }
        return render_template('m/index.html', request, context)

    context = { 'main': MAIN % 'pc/debug/main.js' }
    return render_template('pc/debug.html', request, context)


async def law(request):
    if request.device.is_mobile:
        context = { 'main': MAIN % 'm/index/law.js' }
        return render_template('m/index.html', request, context)

    context = { 'main': MAIN % 'pc/index/law.js' }
    return render_template('pc/index.html', request, context)


async def generate(request):
    context = { 'main': MAIN % 'pc/generate/main.js' }
    return render_template('pc/index.html', request, context)


async def generate_pdf(request):
    style = """
<style>
@page {
    size: A4 portrait;
    margin: 15mm;

    @top-left { content: '%s'; font-size: 9px; color: #bbb; }
    @top-center { content: '%s'; font-size: 9px; color: #bbb; }
    @top-right { content: '%s'; font-size: 9px; color: #bbb; }

    @bottom-left { content: '%s'; font-size: 9px; color: #bbb; }
    @bottom-center { content: '%s'; font-size: 9px; color: white; }
    @bottom-right { content: %s; font-size: 9px; color: #bbb; }
}
</style>
    """

    pdf_id = uuid.uuid1().hex
    deal = request.data['deal']

    logger.info('[PDF] [%s] %s' % (pdf_id,json.dumps(deal)))

    lang = request.data['lang']
    title = request.data['title']
    header = request.data['header']
    html = request.data['html']


    now = datetime.datetime.now()

    defaults = {
        'header-right': {
            'en': 'Created at %s' % now.strftime('%Y-%m-%d %H:%M:%S'),
            'cn': '创建时间 %s' % now.strftime('%Y-%m-%d %H:%M:%S'),
        },
        'footer-left': {
            'en': 'Copyright © 2017 All Rights Reserved',
            'cn': '© 2017 版权所有 侵权必究',
        },
        'footer-right': {
            'en': "'Page ' counter(page) ' of ' counter(pages)",
            'cn': "'页码 ' counter(page) ' / ' counter(pages)",
        },
    }

    header_left = header.get('left','').replace('\'','\\\'') or 'Business Law Deals'
    header_center = header.get('center','').replace('\'','\\\'') or ''
    header_right = header.get('right','').replace('\'','\\\'') or defaults['header-right'][lang]

    footer_left = defaults['footer-left'][lang]
    footer_right = defaults['footer-right'][lang]

    style = style % (header_left,header_center,header_right,footer_left,pdf_id,footer_right)

    title = title or 'Business Law Deal'
    keywords = ['Business','Law','Deal']
    description = 'PDF is generated by VantageAsia. All rights reserved.'
    authors = ['Vantage Asia','Leo Long']
    generator = 'WeasyPrint'
    created = now.strftime('%Y-%m-%dT%H:%M:%S+08:00')

    pdf_doc = weasyprint.HTML(string=style+html).render()
    pdf_doc.metadata = weasyprint.document.DocumentMetadata(
                            title = title,
                            keywords = keywords, description = description,
                            authors = authors, generator = generator,
                            created = created, modified = created)
    pdf_base64 = base64.b64encode(pdf_doc.write_pdf()).decode('utf8')

    filename = title.replace(' ','-').replace('/','-').replace('\\','-')

    return Response(data=dict(
        filename=filename+'.pdf',
        pdf='data:application/pdf;base64,%s' % pdf_base64,
    ))



